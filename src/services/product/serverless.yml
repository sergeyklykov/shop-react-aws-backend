service: product-service

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: "arn:aws:dynamodb:eu-west-1:*:*"
  environment:
    PRODUCTS_NOTIFICATION_TOPIC: { "Ref": "createProductTopic" }

plugins:
  - serverless-auto-swagger
  - serverless-offline
  - serverless-webpack

custom:
  webpack:
    webpackConfig: "../../../webpack.config.js"

resources:
  Resources:
    products:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    stock:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stock
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue

    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic

    productsImportSucceed:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: "email"
        Endpoint: "success@example.com"
        TopicArn: { "Ref": "createProductTopic" }
        FilterPolicy:
          import:
            - success

    productsImportFailed:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: "email"
        Endpoint: "fail@example.com"
        TopicArn: { "Ref": "createProductTopic" }
        FilterPolicy:
          import:
            - fail

  Outputs:
    queueUrl:
      Value: { "Ref": "catalogItemsQueue" }

functions:
  getProductList:
    handler: index.getProductsList # ../src/lambdas/getProductsList/index.handler
    events:
      - http:
          method: GET
          path: /products
          cors: true
  getProductById:
    handler: index.getProductById # ../src/lambdas/getProductById/index.handler
    events:
      - http:
          method: GET
          path: /products/{id}
          cors: true
          request:
            parameters:
              paths:
                id: true
  createProduct:
    handler: index.createProduct # ../src/lambdas/createProduct/index.handler
    events:
      - http:
          method: POST
          path: /products
          cors: true
  catalogBatchProcess:
    handler: index.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
          batchSize: 5
